/1-Revision PHP 00:
Visibilité-Autoload-Namespace-Interface
2/MVC
SYMFONY :
intro: qu'est-ce?
ETAPE1 :installation de SF 3.4
LTS :long time support (differents model de Symfony)
ETAPE2 :bunddle
ETAPE3 :les routes et les controlles
ETAPE4 :créer la boutique SF 
ETAPE 5 /twig ('moteur de template)
ETAPE 6 :les assets 
ETAPE 7: Entites
ETAPE 8 :doctrine
ETAPE 9: les formulaires
ETAPE  10: validations des donnees
ETAPE 11: ASSOCIATION MAPPING 
etape 12: securite et utilisateur
etape 13: installation et boutique sur SF 3.4
BONUS: Formulaire de contact
Aziz Tobbal






Aziz [10 h 53]
explications.txt 
Symfony:
Intro: keskeu Symfony
Etape 1 => installation de symfony 4.3
Etape 2 => Les Bundles
Etape 3 => Les routes et les controllers
Etape 4 => Creer un site boutique avec Symfony
Etape 5 => TWIG (moteur de template)
Etape 6 => Les assets
Etape 7 => Entités
Etape 8 => Doctrine
Etape 9 => Les formulaires
Etape 10 => Validation des données
Etape 11 => Securité et utilisateurs
Etape 12 => Association Mapping
Etape 13 => Installation et boutique sur SF 4.3
Bonus => formulaire de contact
Intro:
**************************************************
- Interet d' un Framework:
  - Une organisation optimisée
  - Fonctionnalités communes a tous les projets
  - Services disponibles (Routing, Securité, BDD, Moteur de Template, Formulaire)
  - Communauté active, grosse bibliotheque pour debuggage
- Choix du Framework
  - Le sien (pédagogique)
  - Framework Fullstack (Symfony, Zend, Laravel, Cake)
  - Les minis framework (Silex, Slim, Codelgniter, Lumen)
- Le framework Symfony
  - Framework français crée par Sensiolabs
  - Différentes versions LTS ( long time support):
     - 2.8
     - 3.4 amélioration de la 2.8, plus souple, avec des Fonctionnalités
     - 4.4 amélioration de la 3.4, mais bundeleLess, Flex, Encore (webpack), Maker, PHP 7.1
Installation de SF 3.4
- installer Composer
- installer SF 3.4
- Arborescence des dossiers et fichiers
- Lancement de l' settings_applications
1- Installer Composer
Composer est un outil de dépendance. Il permet de télécharger et mettre a jour tous les outils (services, composants, dépendances) dont nous aurons besoin
-DL: https://getcomposer.org/download/
cliquer sur le lien composer-Setup.extension
Installer: suivre les étapes
2- Installer SF
(doc symfony https://symfony.com/doc/current/index.html#gsc.tab=0)
Aller dans le dossier Symfony
Maj clic droit
Ouvrir une fenetre powershell ici
<cmd>Ligne de commande a ecrire
composer create-project symfony/framework-standard-edition test
Une fois terminé l' install, cliquer dix fois sur enter pour terminer l' install (bandeau vert qui apparait pour ok)
A ce stade, un dossier test a été crée
3- Arborescence des dossiers et fichiers
- app/
   contient toute la configuration de l' app (bdd, securité, routes)
- bin/
   va contenir tous les executables de l' app ( de SF) 
- src/
   le dossier dans lequel on va coder notre MVC ( le plus important, celui dans lequel nous allons passer beaucoup de temps)
- var/
   Les fichiers ecrits par symfony au fur et a mesure ( on va y trouver le cache et les logs)
- tests/
   Les tests unitaires
- web/
   Repertoire web (app.php ou app_dev.php, img/css/js/fonts)
- vendor/
   Le coeur de SF (les fichiers codés par le studio de developpement)
- composer.json
   fichier qui contient la liste de toutes les dépendances dont on a besoin
4 - Lancement de l' application
Méthode 1:
localhost/back/symfony/test/web/app.php
localhost/back/symfony/test/web/app_dev.php
Methode 2
on va dans le dossier test
maj clic droit
<cmd>
php bin/console server:run 
puis taper
localhost:8000
dans la barre URL du navigateur
Différence entre mode dev et prod
localhost/Symfony/test/web/toto
localhost:8000/toto
A ce stade, notre appli affiche un message de bienvenue, RAS
Etape 2: Les Bundles
Sommaire:
- Le concept des Bundles
- Création du premier Bundles
1 - le concept
Les bundles sont des briques/modules de notre application
UserBundle: => dossier
   UserController (C) => fichier .php
   UserModel (M) => fichier .php
   View : inscription/connexion/profil... => fichier .php
Avec la nouvelle version de symfony (4), il est préférable de créer un seul Bundle ( généralement appelé appBundle, aussi faisable sur la version 3)
2 - Creation du premier Bundle
On va créer un Bundle: POLES/TestBundle
<cmd>
php bin/console generate:bundle
faire y ensuite pour yes
<cmd>
POLES/TestBundle
puis triple Enter
Puis taper annotation ( a la place de xml)
=>création de plusieurs fichiers ( ne pas tenir compte du failed)
Le Bundle a été crée mais il faut l' enregister dans composer.json
Il faut ajouter
"POLES\\": "src/POLES"
en dessous de la ligne
"autoload": {
    "psr-4": {
      "AppBundle\\": "src/AppBundle",
      (ajouter une virgule a la fin)
Retourner sur la concole pour faire un
<cmd>
composer update
Notre bundle se localise dans src/POLES/TestBundle et il se compose de 4 dossiers:
   - Controller
     Tous les controllers du bundle
   - DependencyInjection
     Injection de dépendances
   - Resources
     Vues et Routes (YML) et éventuellement JS
   - Test
     Tests liés au fonctionnement du Bundle
A ca stade le Bundle est fonctionnel, mais petite erreur dans le navigateur a corriger
=> aller dans le dossier src/POLES/TestBundle/Controller/DefaultController.php
et remplacer cette ligne
return $this->render('POLESTestBundle:Default:index.html.twig');
par celle ci
return $this->render('@POLESTest/Default/index.html.twig');
=> Désormais, erreur disparue et affichage du message Hello World
Etape 3: Routes & controllers
Sommaire:
- Création de routes
- L' objet Request
- L' objet Response
- Redirection
- Message
1 - Création de Routes
("/") -> route simple homepage
  ("/bonjour/") -> route echo (erreur)
  ("/bonjour2/") -> route reponse
  ("/hello/{prenom}") -> route reponse + param URL
  ("/hola/{prenom}") -> route render de vue (html.twig) + param URL
  ("/ciao/{prenom}/{age}") -> route render de vue + 2 params URL
  ("/redirect/") -> route avec redirection (RedirectResponse)
  ("/redirect2/") -> route avec redirection (redirectToRoute())
  ("/message/") -> route avec redirect et message en session
2/ L'objet Request 
  <code>
  use Symfony\Component\HttpFoundation\Request;
  Correspond à la partie requete de la requête HTTP. 
  <code>
  $session = $request -> getSession(); 
  -> récupère la session ($_SESSION)
  Autres exemples : 
  <code>
  $session -> set('prenom', 'Yakine');
  echo $session -> get('prenom'); 
  Autre méthode :
  <code>
  $request -> session -> set('prenom', 'Yakine'); 
  
  Autres utilités de $request : 
  <code>
  $request -> query -> get('argument_url');
  $request -> request -> get('champs_form');
  $request -> cookies -> get('cookie');
  $request -> server -> get('server');

3 - L' objet Response
Correspond a la partie réponse de la requete http
<code>
use Symfony\Component\HttpFoundation\Response;
Toute action/fonction attend une réponse obligatoire
Même la fonction render est une réponse
return $this -> render();
return $this -> getTemplating() -> renderResponse
Ces deux lignes sont similaires, plutot privilégier la première comme elle est plus courte

4 - Redirection
Premiere Méthode
<code>
use Symfony\Component\HttpFoundation\RedirectResponse;
cf route ....."/redirect/" et "/redirect2/"
A ce stade, toutes nos routes doivent avoir un name

5 - Message
$session -> getFlashBag() -> add();
=> nous permet d' enregistrer des messages qui seront disponibles dans d' autres pages ( messages de' félicitations ou d' erreur)
app.session => permet en TWIG de récupérer les messagers les infos en session
app.user => nous permet, toujours en twig, de récupérer les infos de l' utilisateur actuellement connecté
Etape 4: création du site Boutique sur SF
Sommaire:
- creation du projets
- reorganiser le appbundle
- creation des premieres routes
1 - creation du projet
Dans le dossier symfony, maj clic droit
composer create-project symfony/framework-standard-edition Boutique3
cd Boutique3
php bin/console server:run
test : localhost:8000, a condition d' avoir fermé sa fenetre console de l' autre projet, sinon, il passe au port dispo suivant: 8001
2 - Reorganiser de AppBundle
localhost/        -> Produit/index.html.twig
localhost/categorie/pull -> Produit/index.html.twig
localhost/produit/12   -> Produit/show.html.twig
Admin Controller :
localhost/admin/produit/list/ 
  -> Admin/list_produit.html.twig
  Je suis dans la page qui liste les produits
localhost/admin/produit/add/ 
  -> Admin/form_produit.html.twig
  Je suis dans le formulaire produit
 -> MembreController
 ->CommandeController 
 -> ProduitController

 ->creation de nos vue
  _Admin/liste_produit,form_produit etc...
  _Membre /(connexion,inscription,profil...)
  _commande/(panier,transport ,livraison,paiement,...)
  Produit/(home,categorie,boutique,fiche,produit,..)
  -> creation des premieres routes
  _ProduitController :"/","/produit{id}/",etc.....
  _AdminController : "/admin/"produit/."  admin/membre /"etc....

  ETAPE 5
  =>TWIG (moteur de template)
  sommaire:
  creation de layout 
  l'heritage twig
  modification de nos vue
  documentation twig

  --- twig est le moteur template de symfony ce moteur(comme tpl, smarty,twig ou blade...) permet d'afficher  du php ds les vues html
  de maniere plus simple 
  exemple :
  <?=$membre['prenom']?>
  {{membre.prenom}}
  1/ Creation du layout------
  chemin :boutique3/app/Ressources /views/layout.html.twig
  un layout est une structure de page dans laquelle on peut ajouter des elements
  le concept ns permet d'avoir plusieurs pages ds notre site
  2/L'heritage Twig ------
  avec Twig on parle d'heritage  ça veut dire que nos vues heritent d'un layout et peuvent contenir du htmlà l'interieur des block disponibles 
  ===> De maniére generale  il faut voir  le fonctionnement de Twig et methode render  comme un chargement de contenu 
  de maniere empilé(poupé russes),Render temporise le contenu(memoire tampon)et affiche aussi le layoutla vue et les params
3/modification de nos vues-----
<code>
{% extends 'layout.html.twig' %}
{% block content %}
contenu HTML de la page 
{% endblock %}
/!\ qd on utilise l'heritage Twig nos vue ne peuvent contenir HTML qu'à l'interieur des block prevus 
4/documentation twigs
https://twig.symfony.com/doc/2.x

a ce stade noree app ns permet les pages d'accueil,inscription,connexion,profil,boutique,produit,categorie ,gestion,
commande
====> mais ns ne pouvons pas echanger avec la BDD  ns devons voir les entity et Doctrine
</code>


-----------------------------------------
ETAPE 6 :ASSETS
-------------------------------------------
sommaire :
les composant Asset de SF ns permet de gerer les ressources (photo,etc..)et de les appeler de maniere absolue
~~~~~~~~~~~~~~~~~~~~
1/modification du fichier composer.json
<code> composer.json
"require " :{
   "symfony/asset":3.4"
}
----------------------------------

2/mise à jour de l'app.

<cmd>
composer update
-----------------------------
3/dossier web (photo,css/js....)
boutique3/web/
(on met 3 dossiers ds le dossieer web)
-photo/(à récupérer du site en procedurale) 
-css
-js


----------------------------------------
4/ modification des vues




-------------------------------------------------
                ETAPE 7 :Entités
-------------------------------------------------

sommaire:
1/ Doctrine ORM et le concept des entitées
d'une certaine maniere les entites correspondent à la partie model  de notre MVC 
c'est la relation avec la BDD  mais en PHP et pas SQL
--ORM Objet Relation Mapping
Ns allons créer ons entites sous forme de classes PHP(POPo:plain old php objet)qui vont permettre à Doctrine de comprendre notre bdd et de la manipuler
ex: pour faire INSERT INTO produit
$produit=new Produit;
persist($produit);
remove($produit);
createForm($produit);
===> pour que cela soit possible  il faut expliquer à Doctrine  quelle relation  il existe entre la BDD et nos Entity
-----------------------------------------
2/Créer entity produit
a:créer le dossier src/AppBundle/Entity
b: créer le fichier src/AppBundle/Entity/Produit.php
c: créer notre class produit et ses proprietes
-----------------------------

3/Annotations(mapping)
avec Doctrine ORM ,on parametre le mapping via les annotations.<code>
use Doctrine\ORM\Mapping as ORM
-->voir le fichier Entity/produit.php
/!\les annotations pour l'id sont plus longues
liens :
Basing Mapping:https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/association-mapping.html
Association Mapping:https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/basic-mapping.html
---------------------------------------
4/mettre à jour la BDD
<cmd>
php bin /console doctrine:schema:update --force
-->voir la requete
permet de créer une BDD à partir de nos entitées
-------------------------------
5/generer les entités en ligne de commande 
A. on doit conecté notre app (projet SF) à la BDD
   -app/Config/parametre
B- 
<cmd>
php bin/console doctrine:generate:entity
AppBundle:Membre
->on suit les etapes

===>cela créer le fichier Entity/Membre.php en qql lignes de commandes.
----------------------
6/generer la BDD via les entités
on peut créer la BDD depuis la fiche entitées déjà codées
===> pr créer les tables ds la BDD ,il faut que la BDD existe déjà
-------------------------
7/generer les entités par BDD
on peut créer les entitées depuis le BDD
<cmd>
 php bin/console doctrine:mapping:import AppBundle\Entity annotation --path=src/AppBundle/Entity
===> cette commande ns a permi de generer les entitées depuis la table de la BDD
PAR CONTRE RIEN POUR REPOSITORY ?GETTEUR OU SETTEUR 
<code> à ajouter ds chaque entity
@ORM\Entity(repositoryClass="AppBundle\Repository\ProduitRepository")
@ORM\Entity(repositoryClass="AppBundle\Repository\CommandeRepository")
@ORM\Entity(repositoryClass="AppBundle\Repository\MembreRepository")
@ORM\Entity(repositoryClass="AppBundle\Repository\DetailsCommandeRepository")
<cmd>
php bin /console doctrine:generate:entities AppBundle
ça ns créer nos getteur, nos setteur et repository

----------------------------
ETAPE 8 : Doctrine
sommaire :
1/le service doctrine
2/acceder au service doctrine depuis les controllers
3/requete SELECT * FROM....
3/requete SELECT * FROM....WHERE id=...
3/requete SELECT * FROM....WHERE....=...
3/requete SELECT * INSERT /update
3/requete DELETE 
CREATE query et query query_builder



1/
doctrine fait 2 choses 
A/ORM :il permet de lier la table de notre BDD à nos entitées on va pas manipuler la BDD ms des objets(la table de produit--->Entity Produit)
B/Doctrine DBAL (DataBase Abstract Layer)
le BDAL est une couche qui passe au dessus du PDO maintenant on ne fait plus de requete SQL
ms on va manipuler  les fonct° PHP on parle de DQL (Doctrine Query Langage)
---------------------
2/ acceder au service doctrine depuis les controllers
A/ il faut pouvoir manipuler les entitées dont on a besoin<code>
use AppBundle\entity\produit;
B/ Acceder au repository à partir d'un controllers
$repo = $this -> getDoctrine()->getRepository(Produit::Class); 
C/acceder au Manager (qui peut faire des requete sur toutes les tables$em=$this ->getDoctrin()->getManager();
---------------------
3/requete SELECT *FROM 
DEPUIS LE REPOSITORY/
<CODE>
$repo=$this->getDoctrine()->getRepository(Produit::class);
$produit=$repo->findAll(Produit::class)

4/SELECT *FROM    WHERE id=
2 methodes 
Depuis le Repository:
       <code>
       $em =$this->getDoctrine()->getRepository(Produit::class);
       $produit = $em->find(Produit::class);

       Depuis le Manager:
       $em =$this->getDoctrine()->getManager();
       $produit = $em->find(Produit::class, $id);
       
5/ Requetes SELECT *FROM ....WHERE.....=.....
la fonct° findby ns permet de recuperer des infos de manieres cible 
<code> 
$repo=$this->getDoctrine->getRepository(Produit::Class);
$produit=$repo->findBy(array('categorie '=>$cat));
$produit=$repo->findBy (array('taille'=>'l'));

$produit=$repo ->findBy(array('categorie'=>'tee-shirt','taille'=>'l'));

SELECT *FROM produit WHERE 'taille='l' and categorie

$produit = $repo->findby (['couleur'='rouge'],['prix'->'DESC'],0,10);
SELECT * FROM produit WHERE  couleur='rouge' ORDER BY prix DESC LIMIT 0,10
$produit=$repo->findOneBy(array('taille'=>'l')) ;
SELECT* FROM produit WHERE taille = 'l' LIMIT 0,1

6/
-Avec doctrine on manipule des objets (Entité)
->Enregistrement:
 -on créer un ovbjet vide 
 -on nourri l'objet via formulaire
 on persiste et on flush

 <code>
 $produit = new Produit;
 $produit -> setTitre('dsqds' )
 $produit -> setReference('ddsq');
 ....
 $em -> persist($produit);
 $em ->flush();
 -->Modification :
 -Pour update une entrée  c'est pareil que ADD sauf que l'objet n'est pas vide à la base.
 on doit recuperer l'objet avec find().

7/ Requete DELETE
Avec doctrine on manipule des objets (Entité)alors on recupére l'objetb à supprimer avec la f° find().

<code>
$em -> remove($produit);
$em -> flush();

8/CREATE QUERY et  query_builder
pr effectuer des requete specifiques il y a 2 possibilité
-create query 
-query Builder 
voir produit repository/!\ds l'objectif de factoriser  notre code  ns créons nos requetes specifiques 
ds repository afin de les utilmiser de mpaniere +simple ds les contyrollers
===> voir le produitController route"/categorie/" et la f° getAllCategorie declarée ds le 
produitRepository.

Query Builder: https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/query-builder.html
	
	Create Query : 
	https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/dql-doctrine-query-language.html
	



SELECT DISTINCT (categorie)FROM produit


-------------------------------------------------------------------------
EXO 
   ----------------------------------------------------------------
   faire une gestion des produits :
   _AdminController 
   Affichage des produits :
   ->/admin/produit/
   $produit qui va recupérer tous les produits du site
   ->list_produit.html.twig
   ->tableau avec tous les infos du produits
   -> action :modifier/supprimer

public function adminProduitAction(){
		
		$params = array();
      'produits' =>$produit
		      return $this -> render('@App/Admin/list_produit.html.twig', $params);
	} 
   public function indexAction(){
			//1:recupérer les infos
			$repo = $this ->getDoctrine() ->getRepository(Produit::class);
			$produits = $repo -> findAll(); 
tableau:
{% extends 'layout.html.twig' %}

{% block titre %} produit - liste{% endblock %}

{% block content %}
<h1 class="display-4 text-center>LISTE DES PRODUITS</h1><hr>
<div class="row m-4">
<a href="" class="btn btn-primary"> ajouter un produit</a>
</div>
<table class="table table-bordered">
<thead>
<tr>
<th>photo</th>
<th>id produit</th>
<th>Titre</th>
<th>description</th>
<th>taille</th>
<th>couleur</th>
<th>stock</th>
<th>prix</th>
<th colspan="3">Action</th>
</tr>
</thead>
<tbody>
{% for pdt in produits    %}
<tr>
<td>{{pdt.photo}}</td>
<td>{{pdt.id}}</td>
<td>{{pdt.titre}}</td>
<td>{{pdt.description}}</td>
<td>{{pdt.taille}}</td>
<td>{{pdt.couleur}}</td>
{%  if pdt.stock== 0 %}

<td class="text text-danger"><b>{{pdt.stock}}</b></td>
{% elseif pdt.stock <= 20 %}
<td class="text text-warning"><b>{{pdt.stock}}</b></td>
<td class="text text-success"><b>{{pdt.stock}}</b></td>
{% endif %}
<td>{{pdt.prix}}</td>
<td><a href=""><i class="fas fa-eye"></i></a></td>
<td> <a href=""<i class="fas fa-edit"></i></a></td>
<td><a href=""<i class="fas fa-trash"></a></i></td>






</tr>





</tbody>




</table>
