

			---------
			SYMFONY :
			---------
SOMMAIRE : 
INTRO : Qu'est-ce que Symfony
ETAPE 1 : Installation de SF 3.4
ETAPE 2 : Les bundles
ETAPE 3 : Les routes et les controllers
ETAPE 4 : Créer la Boutique sur SF 
ETAPE 5 : TWIG (moteur de template)
ETAPE 6 : Les assets 
ETAPE 7 : Entités 
ETAPE 8 : DOCTRINE 
ETAPE 9 : Les formulaires 
ETAPE 10 : Validation des données 
ETAPE 11 : Association Mapping
ETAPE 12 : Sécurité et Utilisateurs 
ETAPE 13 : Installation et boutique sur SF 4.3
BONUS : Mise en prod
BONUS : Formulaire de contact 
BONUS : Panier  




--------------------------------------
INTRO : Qu'est-ce que Symfony
---------------------------------------

1/ Quel intérêt d'utiliser un Framework
	
	A. Une organisation optimisée
	B. Fonctionnalités communes à tous les projets
	C. Services disponibles (Routing, Sécurité, BDD, Moteur de template, formulaire...)
	D/ Communauté


2/ Choix du Framework 
	A. Propre Framework (pédagogie)
	B. Les frameworks fullstack (Symfony, Zend, Laravel, cake...)
	C. Les minis Frameworks (Silex, Slim, CodeIgniter, Lumen...)


3/ Symfony
	
	-> Framework Français créé par sensiolabs 
	-> versions :
		LTS (Long Time Support): 
			v2.8
			v3.4 : 2.8 plus souple (moins rigide), avec des fonctionnalités
			v4.4 : 3.4 BundleLess, Flex, Encore (webpack), Maker, PHP7.1
				
				
----------------------------------
ETAPE 1 : Installation de SF 3.4			
Sommaire : 
1/ Installer Composer
2/ Installer SF3.4
3/ Arborescence des dossiers et fichiers
4/ Lancement de l'application
------------------------------------

1/ Installer Composer

Composer est un outils de dépendance. Il permet de télécharger et de mettre à jour tous les outils (services, composants, dépendances) dont on a besoin. 

	- Télécharger : https://getcomposer.org/download/
	composer-Setup.exe
	
	- Installer : Suivre les étapes. 



2/ Installer SF3.4
	
	- Dans le dossier Symfony 
	- MAJ + clic-droit : Ouvrir une fenêtre powershell ici

	<cmd>
	composer create-project symfony/framework-standard-edition test

	==> A ce stade un dossier test a été créé. C'est un nouveau projet SF. 

3/ Arborescence des dossiers et fichiers

	- app/  : contient toute la configuration de l'app (BDD, sécurité, routes...)
	- bin/  : Les éxécutables de l'app (de SF)
	- src/  : Le dossier dans lequel nous allons coder notre MVC
 	- var/  : Les fichiers écrits par SF au fur et à mesure (cache, logs)
	- tests/ : Les tests unitaires. 
	- web/  : repertoire WEB (app.php ou app_dev.php, img/css/js/fonts)
	- vendor/ : Le coeur de SF (les fichiers codés par les sensio Labs)
	
	- composer.json : Contient la liste de toutes les dépendances dont on a besoin.


4/ Lancement de l'application			
			
	- Méthode 1 : 
	localhost/Symfony/test/web/app.php
	localhost/Symfony/test/web/app_dev.php


	- Méthode 2 : 
	On va dans le dossier test/
	<cmd>
	php bin/console server:run
	
	localhost:8000
	

	- Différence entre mode prod et dev : 
	
	localhost/Symfony/test/web/toto
	localhost:8000/toto
	
	===> A ce stade notre application affiche la page de bienvenue. Cela signifie que tout va bien. 
	

-----------------------
ETAPE 2 : Les bundles
Sommaire : 
1/ Le concept des Bundles
2/ Création de notre premier Bundle
-----------------------

1/ Le concept des Bundles
	
	- Les bundles sont des briques de notre applications. 
	
	UserBundle : 
		UserController  (C)
		UserModel (M)
		View : inscription/connexion/profil...

	Avec la nouvelle version de SF (4), on considère qu'il est préférable de créé un seul Bundle (AppBundle). 


2/ Création de notre premier Bundle

	On va créer un Bundle : POLES/TestBundle
	
	<cmd>
	php bin/console generate:bundle 
	
	-> Yes
	-> POLES/TestBundle
	-> POLESTestBundle
	-> src/
	-> annotation
	
	==> Notre Bundle a été créé, mais il faut l'enregistrer.
	
	<code>composer.json
	"psr-4": {
            "AppBundle\\": "src/AppBundle",
			"POLES\\": "src/POLES"
        },

	- Mise à jour de l'app
	<cmd>
	composer update
	
	
	===> Notre Bundle existe dans src/POLES/TestBundle
	Il est composé de 4 dossiers : 
		- Controller : les controllers du bundle 
		- DependencyInjection : Injection de dépendances.
		- Resources : Vues et Routes (YML) et enventuellement JS
		- Test : Test liés aux fonctionnalité du Bundle. 
		
		
	===> A ce stade le Bundle est fonctionnel, mais il y a une petite erreur qu'on va corriger. 
	
	- test/src/POLES/TestBundle/Controller/DefaultController.php 
	<code>
	return $this->render('POLESTestBundle:Default:index.html.twig');
    Devient : 
	return $this->render('@POLESTest/Default/index.html.twig');	
	
	
	===> A ce stade la page d'accueil affiche "Hello World". 
	
--------------------------
ETAPE 3 : Les routes et les controllers
Sommaire : 
1/ création de routes
2/ L'objet Request 
3/ L'objet Response
4/ Redirection
5/ Message
--------------------------
1/ création de routes
	("/") -> route simple homepage
    ("/bonjour/") -> route echo (erreur)
    ("/bonjour2/") -> route response
    ("/hello/{prenom}") -> route response + param URL
    ("/hola/{prenom}") -> route render de vue (html.twig) + param URL
    ("/ciao/{prenom}/{age}") -> route render de vue + 2 params URL
    ("/redirect/") -> route avec redirection (RedirectResponse)
    ("/redirect2/") -> route avec redirection (redirectToRoute())
    ("/message/") -> route avec redirect et message en session


2/ L'objet Request 
	<code>
	use Symfony\Component\HttpFoundation\Request;

	Correspond à la partie requete de la requête HTTP. 

	<code>
	$session = $request -> getSession(); 
	-> récupère la session ($_SESSION)

	Autres exemples : 
	<code>
	$session -> set('prenom', 'Yakine');
	echo $session -> get('prenom'); 

	Autre méthode :
	<code>
	$request -> session -> set('prenom', 'Yakine'); 

	
	Autres utilités de $request : 
	<code>
	$request -> query -> get('argument_url');
	$request -> request -> get('champs_form');
	$request -> cookies -> get('cookie');
	$request -> server -> get('server');
	
3/ L'objet Response

	- Correspond à la partie réponse d'une requête HTTP. 
	
	<code>
	use Symfony\Component\HttpFoundation\Response;
	
	- Toute action (fonction) doit avec une réponse. 
	
	<code>
	return new Response('toto');
	
	- Même la fonction render est une réponse. 
	
	<code>
	return $this -> render();
	return $this -> getTemplating() -> renderResponse(); 
	
	
4/ Redirection

	<code>premiere méthode : 
	use Symfony\Component\HttpFoundation\RedirectResponse;
	
	cf route "/redirect/" et "/redirect2"
	
	/!\ A ce stade toutes nos routes doivent avoir un name
	
5/ Message
	
	<code>
	$session -> getFlashBag() -> add();

	-> permet d'enregistrer des messages qui seront disponibles dans d'autres pages (messages de félicitations, ou d'erreur).
	
	-> app.session : Qui nous permet en Twig de récupérer les infos en session. 
	-> app.user : Qui nous permet en Twig de récupérer les infos de l'utilisateur actuellement connecté



--------------------------------------
ETAPE 4 : Créer la Boutique sur SF 3.4
Sommaire : 
1/ Création du projet
2/ Réorganiser le AppBundle
3/ Création des première route
--------------------------------------
1/ Création du projet

	- Dans le dossier Symfony
	<cmd>
	composer create-project symfony/framework-standard-edition Boutique3
	cd Boutique3
	php bin/console server:run
	
	Test : localhost:8000 

2/ Réorganiser le AppBundle
 
	-> Création de nos controllers: 
		AdminController
		MembreController
		CommandeController
		ProduitController

	-> création de nos vues 
		Admin/ (list_produit, form_produit etc...)
		Membre/ (connexion, inscription, profil...)
		Commande/ (panier, transport, livraison, paiement...)
		Produit/ (home, categorie, boutique, fiche_produit...)

3/ Création des premières routes
	
	-> ProduitController : "/", "/produit/{id}/" etc...
	-> AdminController : "/admin/produit/", "/admin/membre/" etc... 
		


-------------------------
ETAPE 5 : TWIG (moteur de template)
Sommaire : 
1/ Création du layout
2/ L'héritage Twig
3/ Modification de nos vues 
4/ Documentation Twig
--------------------

 TWIG est le moteur de template de Symfony. Un moteur de template (tpl, smarty, Twig, blade...) permet d'afficher du php dans les vues HTML de manière plus simple. 

	exemple : 
	<?= $membre['prenom'] ?>
	{{ membre.prenom }}


1/ Création du layout

	Chemin : Boutique3/app/Resources/views/layout.html.twig
	
	Un layout est une structure de page, dans laquelle on peut ajouter des éléments/du contenu. 
	Le concept des layout permet d'avoir plusieurs structures de pages dans notre site (ex: front vs backoffice).
	
2/ L'héritage Twig

	Avec Twig on parle d'héritage. Cela signifie que nos vues héritent (extends) d'un layout, et peuvent contenir de l'HTML à l'intérieur des block disponibles (créés dans le layout). 
	
	
====> De manière générale, il faut voir le fonctionnement de Twig et de la méthode render comme un chargement du contenu de manière "empilée" (analogie de la poupée russe). Render temporise (mémoire tempon) le contenu, et affiche en même temps le layout, la vue et les params. 

3/ Modification de nos vues 

	<code>
	{% extends 'layout.html.twig' %}
	{% block content %}
	Contenu HTML de la page
	{% endblock %}	

	/!\ ATTENTION : Quand on utilise l'héritage Twig, nos vues ne peuvent contenir de l'HTML qu'à lintérieur des blocks prévus pour. 

4/ Documentation Twig	

	https://twig.symfony.com/doc/2.x/

====> A ce stade notre app permet d'afficher les pages accueil, inscription, connexion, profil, boutique, produit, categorie, gestion membre, gestion produit, gestion commande. 

====> Par contre nous ne sommes pas encore en mesure d'échanger avec la BDD (ajouter un contenu, et récupérer le contenu). Il faut voir les Entity et Doctrine. 

-----------------
ETAPE 6 : ASSETS
-----------------
Sommaire : 
1/ Modification du fichier composer.json
2/ Mise à jour de l'app. 
3/ Dossier Web/ (photo, css/ js...)
4/ modifications des vues. 
-------------------------------

 - Le composant Asset de SF nous permet de gérer les ressources (photo, img, js, fonts, css...) et de les appeler de manière absolue. 

1/ Modification du fichier composer.json

	<code> composer.json
	"require": {
		"symfony/asset": "^3.4"
	}

2/ Mise à jour de l'app. 
	
	<cmd>
	composer update


3/ Dossier Web/ (photo, css/ js...)

	Boutique3/web/
		photo/ (à récupérer du site en procédural)
		css/ (à créer)
			styles.css
		js/ (à créer)


4/ modifications des vues. 

	
	href="../../css/styles.css"
	-> href="{{ asset('css/styles.css') }}"

	href="inscription.php"
	-> href="{{ path('inscription') }}"

	
	La fonction asset() de TWIG nous permet de charger une ressource (photo, css, js, fonts...)
	
	La fonction path() de TWIG nous permet de créer un lien vers une page (route). 
	
	
	





-----------------
ETAPE 7 : Entités
-----------------
Sommaire: 
1/ Doctrine ORM et le concept des Entités (Entity)
2/ Créer Entités Produit
3/ Annotations (mapping)
4/ Mettre à jour la BDD 
5/ Générer les Entités en ligne de commande
6/ Générer la BDD via les Entités
7/ Générer les entités depuis la BDD
------------------

1/ Doctrine ORM et le concept des Entités (Entity)

	- D'une certaine manière, les entités correspondent à la partie MODEL de notre MVC. C'est la relation avec la BDD, mais en PHP et non en SQL. 
	- Théoriquement, nous n'avons plus besoin du SQL. 
	 
	- ORM : Object Relation Mapping 
	
	- Nous allons créé nos entités, sous forme de classes PHP (POPO : Plain Old PHP Object), qui vont permettre à Dcotrine de comprendre notre BDD et de la manipuler. 
	
	Par exemple : Pour faire INSERT INTO Produit
	
	$produit = new Produit;
	persist($produit);
	remove($produit);
	createForm($produit);


	===> Pour que cela soit possible, il faut expliquer à Doctrine, quelle relation existe entre la BDD et nos Entity. 


2/ Créer Entités Produit

	A. Créer le dossier src/AppBundle/Entity/
	B. Créer le fichier src/AppBundle/Entity/Produit.php
	C. Créer notre class Produit et nos propriétés et les getters et les setters

3/ Annotations (mapping)
	
	- Avec Doctrine ORM, on paramètre le mapping via les annotations. 
	<code>
	use Doctrine\ORM\Mapping as ORM

	--> Voir le fichier Entity/Produit.php 

	/!\ Attention : Les annotations pour l'ID (primary KEY) sont plus longues


	Liens : 
	Basic Mapping : 
	https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/basic-mapping.html
	
	Association Mapping : 
	https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/association-mapping.html


4/ Mettre à jour la BDD

	<cmd>
	php bin/console doctrine:schema:update --dump-sql
	--> voir la requete

	php bin/console doctrine:schema:update --force
	--> exécute les modifs en BDD
	
	==> Permet aussi de créer une BDD à partir de nos entités. 

 
5/ Générer les Entités en ligne de commande

	A. On doit connecter notre app (projet SF) à la BDD
		- app/Config/parameters.yml
	
	B.
	<cmd>
	php bin/console doctrine:generate:entity
	
	AppBundle:Membre
	-> On suit les étapes. 
	
	===> Cela a créé le fichier Entity/Membre.php en quelques lignes de commandes. 
	

6/ Générer la BDD via les Entités
	- On peut créer la BDD, depuis les entités déjà codées

	<cmd>
	php bin/console doctrine:schema:update --force
	--> créer les tables dans la BDD. Par contre il faut que la BDD existe déjà. 


7/ Générer les entités depuis la BDD

	- On peut créer les entités depuis la BDD. 
	
	<cmd>
	php bin/console doctrine:mapping:import AppBundle\Entity annotation --path=src/AppBundle/Entity


	==> Cette commande nous a permis de générer les Entités depuis les tables de la BDD. 
	- Par contre cela n'a ni généré les repository, ni les getters et setter
	
	<code> A Ajouter dans chaque Entity
	@ORM\Entity(repositoryClass="AppBundle\Repository\ProduitRepository")
	@ORM\Entity(repositoryClass="AppBundle\Repository\CommandeRepository")
	@ORM\Entity(repositoryClass="AppBundle\Repository\MembreRepository")
	@ORM\Entity(repositoryClass="AppBundle\Repository\DetailsCommandeRepository")

	<cmd>
	php bin/console doctrine:generate:entities AppBundle
	
	==> Cela nous créer nos getter et setters et génère les repository :) :) 

----------------------
ETAPE 8 : DOCTRINE 
Sommaire : 
1/ Le service Doctrine
2/ Accéder au service doctrine depuis les controllers
3/ Requetes SELECT * FROM ...
4/ Requetes SELECT * FROM .... WHERE id = 
5/ Requetes SELECT * FROM .... WHERE .... = .....
6/ Requetes INSERT / UPDATE
7/ Requetes DELETE 
8/ Create Query et Query Builder
---------------------------------------
1/ Le service Doctrine

	Doctrine fait 2 choses : 
		
		1/ Doctrine ORM (Object Relation Mapping)
		Il permet de lier les tables de notre BDD à nos entités. On ne va pas manipuler la BDD, mais des objets (la table Produit ---> Entity Produit)

		2/ Doctrine DBAL (DataBase Abstract Layer)
		Le BDAL est une couche qui passe au-dessus de PDO. A partir de maintenant on ne fait plus de requête SQL, mais on va manipuler du PHP. 

		- En résumé le DBAL va nous permettre de faire des SELECT, INSERT, UPDATE, DELETE, non pas via du SQL, mais via des fonction PHP. On parle de DQL (Doctrine Query Language)
	
		----> NOUS NE FERONS PLUS DE SQL (ou presque)

2/ Accéder au service doctrine depuis les controllers

	A. Il faut pouvoir manipuler les entités dont on a besoin. 
	<code>
	use AppBundle\Entity\Produit; 
	
	B. Accéder au repository dans un controller : 
	<code>
	$repo = $this -> getDoctrine() -> getRepository(Produit::Class);
	
	C. Accéder au Manager (Qui peut faire des requête sur toutes les tables)
	$em = $this -> getDoctrine() -> getManager();
	
	
	
3/ Requetes SELECT * FROM ...

	Depuis le repository : 
	<code>
	$repo = $this -> getDoctrine() -> getRepository(Produit::Class);
	$produits = $repo -> findAll();



4/ Requetes SELECT * FROM .... WHERE id = 
	
	- Depuis le repository : 
	<code>
	$repo = $this -> getDoctrine() -> getRepository(Produit::Class);
	$produit = $repo -> find($id);

	- Depuis le Manager :
	<code>
	$em = $this -> getDoctrine() -> getManager();
	$produit = $em -> find(Produit::class, $id);


5/ Requetes SELECT * FROM .... WHERE .... = .....

	La fonction findBy() va nous permettre de récupérer des données de manière plus ciblée. 
	<code>
	$repo = $this -> getDoctrine() -> getRepository(Produit::Class);
	$produit = $repo -> findBy(array('categorie' => $cat));
	$produit = $repo -> findBy(array('taille' => 'l'));
	
	
	$produit = $repo -> findBy(array(
		'categorie' => 'tee-shirt', 
		'taille' => 'l'
	));
	
	SELECT * FROM produit WHERE taille = 'l' AND categorie = 'tee-shirt'


	$produit = $repo -> findBy(['couleur' => 'rouge'], ['prix' => 'DESC'], 0, 10);
	SELECT * FROM produit WHERE couleur = 'rouge' ORDER BY prix DESC LIMIT 0,10


	$produit = $repo -> findOneBy(array('taille' => 'l')); 
	SELECT * FROM produit WHERE taille = 'l' LIMIT 0,1



6/ Requetes INSERT / UPDATE

	- Avec doctrine on manipule des Objets (Entité)
	
	-> Enregistrement : 
		- On créé un objet vide. 
		- On hydrate l'objet (normalement via un formulaire)
		- on persist et on flush
		
		<code>
		$produit = new Produit;
		$produit -> setTitre('dsqqsdqd')
		$produit -> setReference('ddd');
		...
		$em -> persist($produit);
		$em -> flush();

	-> Modification : 
	
		- Pour update une entrée, c'est la même chose que pour ADD, à ceci près que l'objet n'est pas vide à la base. On doit donc récupérer l'objet à modifier avec la fonction find()
		

7/ Requetes DELETE 
	- Avec doctrine on manipule des Objets (Entité) donc on va récupérer d'abord l'objet à supprimé avec la fonction find(). 

	<code>
	$em -> remove($produit);
	$em -> flush(); 
	
	
	



8/ Create Query et Query Builder

	Pour effectuer des requêtes spécifiques, nous avons 2 possibilités : 
	
	- Create Query (SQL)
	- Query Builder (PHP)
	
	==> VOIR ProduitRepository
	
	/!\ Dans l'objectif de "factoriser" notre code nous créons nos requêtes spécifiques dans le Repository, afin de les utiliser de manière simple dans les controller. 
	
	==> Voir le ProduitController, route "/categorie/" et la fonction GetAllCategories() déclarée dans le ProduitRepository. 
	
	Liens : 
	
	Query Builder: https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/query-builder.html
	
	Create Query : 
	https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/dql-doctrine-query-language.html
	


-------------------------
ETAPE 9 : Les formulaires 
Sommaire : 
1/ Le fonctionnement des formulaires
2/ Générer les formulaire
3/ Récupérer les données du formulaire
4/ Personnaliser un formulaire avec Boostrap
5/ update un enregistrement
6/ Validation des données
7/ Champs file
--------------------------------

1/ Le fonctionnement des formulaires

- De la même qu'on ne manipule pas des enregistrements en BDD, mais bien des objet (Entity), chaque formulaire va être lié à une entité. 

- Ainsi un formulaire est lié à un objet...

Inscription --------> objet Membre
Ajout de produit ---> objet Produit
Modif de produit ---> objet Produit

Un formulaire est généré grâce à une classe (Type --> ProduitType)
Chaque champs d'un formulaire correspond à une classe, service de SF. Cela permet de générer tous les contrôles sur les formulaires. 


2/ Générer les formulaire

	<cmd>
	php bin/console generate:doctrine:form AppBundle:Produit

	===> Cela créé un dossier Form dans notre Bundle, et un fichier ProduitType.php, qui contient la construction du formulaire. 




3/ Récupérer les données du formulaire

	A. Générer le form dans la route	
	
		<code>
		use AppBundle\Form\ProduitType
		$form = $this -> createForm(ProduitType::class, $produit);
		
	
	B. Afficher la vue du formulaire dans la vue
		
		- On envoie le formulaire à la vue via les params
		<code>
		$params = array('produitForm' => $form -> createView())
		
		- On affiche le formulaire : 
			<code>
			{{form(produitForm)}} --> affiche tout le formulaire
			---
			{{form_row(produitForm.reference)}} --> affiche un champs (label, champs, errors)
			---
			{{form_label(produitForm.reference)}} --> affiche le label
			{{form_widget(produitForm.reference)}} --> affiche le champs
			{{form_errors(produitForm.reference)}} --> affiche les erreurs
			
			/!\ Si on affiche les champs un par un, il ne faut pas oublier : 
				{{ form_start(produitForm) }}
				{{ form_end(produitForm) }}
				
	
	C. Récupérer les données saisies
		
		<code>
		$form -> handleRequest($request);
		/!\ Cette ligne est importante pour pouvoir récupérer les données en POST !! 
	
	

	D. Checker la validité du form et traiter les données (enregistrement)

		<code>
		if($form -> isSubmitted() && $form -> is valid()){
			// persist
			// flush
			// message de validation
			// redirection	
		}


4/ Personnaliser un formulaire avec Boostrap
	
	<code>app/Config/config.yml
	twig:
		form_themes:
			- 'bootstrap_4_layout.html.twig'
	

5/ update un enregistrement

	Pour update un enregistrement avec le système des formulaires sur SF, rien de plus simple. Lorsqu'on créé le formulaire dans la route, on précise un objet déjà existant (cf route admin/produit/update/{id}).
	
	---> On dit qu'on hydrate le formulaire. 


6/ Validation des données

	- De base le formulaire est généré par SF de manière basique. Pour gérer nous-même les contraintes, et la sécurité, cela se passe dans le fichier ProduitType.php, et on utilise 'constraints' pour définir les contraintes liées au formulaire. 
	
	-> cf ProduitType.php



7/ Champs file

	Pour la gestion des photos il faut : 
		1/ Enregistrer le nom de la photo dans la BDD
		2/ Enregistrer la photo (data) sur le serveur. 
		
	==> CF fonction uploadFile() dans l'entity Produit. 
	
	/!\ Dans notre formulaire d'ajout de produit il n'est plus necessaire d'avoir le champs photo (TEXT), mais bien un champs file (FILE) qui va récupérer les infos de la photo uploadée. 
	
	

Pour aller plus loin avec les formulaire et Symfony : https://symfony.com/doc/current/reference/forms/types.html

------------------------------------------
Etape 10 : Validation des données (Assert)
------------------------------------------ 
Pour aller plus loin avec la validation des données et Symfony :
https://symfony.com/doc/current/validation.html

------------------------------
Etape 11 : ASSOCIATION MAPPING
------------------------------
Sommaire : 
1/ Le concept
2/ La Documentation de Doctrine
3/ mise en place de l'association Mapping (OneToMany) pour Membre -> Commande
-----------------------------

1/ Avec Doctrine, on a pris l'habitude de travailler avec des objets (Entity) correspondant aux enregistrements dans la BDD (Mapping).

L'association Mapping nous permet de travailler avec des objets dans des objets. Exemple : Un membre peut avoir plusieurs commandes, dans ce cas, dans un objet Membre nous avons un array composé d'objets commande. Une commande appartient à UN membre, dans ce cas dans un objet Commande nous avons un objet membre. 

Grâce à ce fonctionnement il est plus nécessaire de faire des requêtes de jointure, lorsqu'on récupère un objet, on récupère tous les objets liés. 

2/ 
https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/association-mapping.html#association-mapping


3/ mise en place de l'association Mapping (OneToMany) pour Membre -> Commande
	
		-> Entity Membre
		-> Entity Commande

		
		-> Dans la vue list_commande.html.twig, on utilise {{ c.membre.prenom }} pour accéder aux infos du membre qui a passé la commande. 




------------------------------------------
Etape 12 : SECURITE ET UTILISATEURS
------------------------------------------ 
Sommaire : 
1/ Niveau de sécurité
2/ Fichier de sécurité
3/ Creation des routes
4/ Classe Membre (extends UserInterface)
5/ Layout



1/ Niveau de sécurité

	- De base Symfony va considérer un visiteur lambda comme un anonyme. 

	- Ensuite on va définir des niveaux de sécurité pour les utilisateurs connecté :
		- ROLE_USER (user connecté)
		- ROLE_ADMIN
		- ROLE_SUPER_ADMIN 
		
	- SF a un systeme de parefeu  : 
	
		- On définit les routes que les ROLE peuvent emprunter. 
		
		-> Si un user anonyme --> homepage  = OK 
		-> Si un user anonyme --> profil  = pas OK -> connexion -> profil
		-> Si un user connecté --> profil = OK 
		-> Si un user connecté --> admin/produit = pas OK --> page erreur (404) 

		En fonction du visiteur et de la ressources demandée on peut paramétrer une réaction. 



2/ Fichier de sécurité

	<code>app/config/security.yml
	
	On définie plusieurs choses : 
	- encoders (la manière dont les password seront encodés)
	- provider (quelle ressource va servir d'utilisateur : MembreEntity, le login: username)
	- Hierarchie : La pyramide des droits
	- les routes form_login et logout (voir le point suivant)
	- Access control : qui a le droit à quoi


	/!\ Attention le YAML est très sensible aux indentations et aux espaces.


3/ Creation des routes
	
	form_login: 
		login_path: connexion (page de connexion)
		
		check_path: connexion_check (Page de checking de login/password, on doit juste la créée, et la mettre dans l'attribut action de notre formulaire de connexion)
		
		default_target_path: homepage (La page par défaut sur laquelle on est dirigé une fois connecté. Sinon le parefeu prend le dessus)

	logout:
		path: deconnexion (La route de deconnexion. Doit exister mais est vide)
		target: homepage (page de destination, lorsqu'on se déconnecte). 
		


4/ Classe Membre (extends UserInterface)
	
	- A partir de maintenant la classe Membre doit implements l'interface UserInterface
		
		
	--> username (getter/setter)
	--> password (getter/setter)
	--> roles (getter/setter) /!\ roles est un array 
	--> salt (getter/setter)
	
	/!\ Attention lors de l'inscription, il faut penser à définir un role_user par défaut. 
	
	--> public function eraseCredentials() : fonction obligatoire pour que SF prenne la main. 
	
	--> getRoles() et setRoles() au pluriel obligatoirement. 


5/ Layout

	Dans les vues on fait la distinction entre le niveau d'acces des utilisateur avec : 
		
	{{ if is_granted('IS_AUTHENTICATED_FULLY') }}  : tout le monde (sauf anonyme)
	{{ if is_granted('ROLE_USER') }}  : tous les users
	{{ if is_granted('ROLE_ADMIN') }}  : tous les admin
	
		
		
===> Le salage (cf salt.php) c'est l'idée de rendre un MDP quasiment inviolable en ajoutant au MDP soit une chaîne de caractère que seul le développeur connait (petit site, petite structure), ou alors une chaîne aléatoire pour chaque user... Ensuite pour la connexion, on récupère le salage, pour reconstituer le MDP complet.



















